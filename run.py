#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ HH API Integration
"""
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from src.api.hh_api import HeadHunterAPI
from src.api.company_api import fetch_companies_data
from src.models.vacancy import Vacancy
from src.storage.json_saver import JSONSaver
from src.database.db_manager import DBManager, DBConfig, setup_database
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def setup_and_fill_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
    config = DBConfig.from_env()
    db_manager = DBManager(config)

    if not setup_database():
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
    print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å HH API...")
    companies_data = fetch_companies_data()

    if not companies_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π")
        return False

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ {len(companies_data)} –∫–æ–º–ø–∞–Ω–∏—è—Ö")

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üíæ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    total_vacancies = 0

    for company_data in companies_data:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            company_id = db_manager.insert_company(company_data)

            if company_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
                vacancies_added = 0
                for vacancy in company_data.get("vacancies", []):
                    if db_manager.insert_vacancy(vacancy, company_id):
                        vacancies_added += 1

                total_vacancies += vacancies_added
                print(f"‚úÖ {company_data['name']}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {vacancies_added} –≤–∞–∫–∞–Ω—Å–∏–π")
            else:
                print(f"‚ö†Ô∏è  {company_data['name']}: –∫–æ–º–ø–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {company_data['name']}: {e}")

    print(f"üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_vacancies}")
    return True


def db_manager_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    config = DBConfig.from_env()
    db_manager = DBManager(config)

    while True:
        print("\n" + "=" * 50)
        print("üìä –ú–ï–ù–ï–î–ñ–ï–† –ë–ê–ó–´ –î–ê–ù–ù–´–• HH VACANCIES")
        print("=" * 50)
        print("1. üìà –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
        print("2. üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print("3. üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
        print("4. üöÄ –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        print("5. üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print("6. üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("=" * 50)

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-6): ").strip()

        if choice == "1":
            show_companies_and_vacancies_count(db_manager)
        elif choice == "2":
            show_all_vacancies(db_manager)
        elif choice == "3":
            show_avg_salary(db_manager)
        elif choice == "4":
            show_vacancies_with_higher_salary(db_manager)
        elif choice == "5":
            search_vacancies_by_keyword(db_manager)
        elif choice == "6":
            break
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            exit()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def show_companies_and_vacancies_count(db_manager: DBManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π"""
    print("\nüè¢ –ö–û–ú–ü–ê–ù–ò–ò –ò –ö–û–õ–ò–ß–ï–°–¢–í–û –í–ê–ö–ê–ù–°–ò–ô")
    print("-" * 40)

    data = db_manager.get_companies_and_vacancies_count()
    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö")
        return

    for i, (company, count) in enumerate(data, 1):
        print(f"{i:2d}. {company:<25} | {count:3d} –≤–∞–∫–∞–Ω—Å–∏–π")


def show_all_vacancies(db_manager: DBManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    print("\nüìã –í–°–ï –í–ê–ö–ê–ù–°–ò–ò")
    print("-" * 80)

    data = db_manager.get_all_vacancies()
    if not data:
        print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    for i, (company, title, salary, currency, url) in enumerate(data[:20], 1):
        salary_str = f"{salary:,.0f} {currency}" if salary and currency else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        print(f"{i:2d}. {company}")
        print(f"   üíº {title}")
        print(f"   üí∞ {salary_str}")
        print(f"   üîó {url}")
        print("-" * 80)

    if len(data) > 20:
        print(f"... –∏ –µ—â–µ {len(data) - 20} –≤–∞–∫–∞–Ω—Å–∏–π")


def show_avg_salary(db_manager: DBManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É"""
    print("\nüí∞ –°–†–ï–î–ù–Ø–Ø –ó–ê–†–ü–õ–ê–¢–ê –ü–û –í–ê–ö–ê–ù–°–ò–Ø–ú")
    print("-" * 30)

    avg_salary = db_manager.get_avg_salary()
    if avg_salary:
        print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {avg_salary:,.0f} —Ä—É–±.")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É")


def show_vacancies_with_higher_salary(db_manager: DBManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π"""
    print("\nüöÄ –í–ê–ö–ê–ù–°–ò–ò –° –ó–ê–†–ü–õ–ê–¢–û–ô –í–´–®–ï –°–†–ï–î–ù–ï–ô")
    print("-" * 60)

    data = db_manager.get_vacancies_with_higher_salary()
    if not data:
        print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        return

    for i, (company, title, salary, currency, url) in enumerate(data[:15], 1):
        salary_str = f"{salary:,.0f} {currency}" if salary and currency else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        print(f"{i:2d}. {company}")
        print(f"   üíº {title}")
        print(f"   üí∞ {salary_str}")
        print(f"   üîó {url}")
        print("-" * 60)

    if len(data) > 15:
        print(f"... –∏ –µ—â–µ {len(data) - 15} –≤–∞–∫–∞–Ω—Å–∏–π")


def search_vacancies_by_keyword(db_manager: DBManager):
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    print("\nüîç –ü–û–ò–°–ö –í–ê–ö–ê–ù–°–ò–ô –ü–û –ö–õ–Æ–ß–ï–í–û–ú–£ –°–õ–û–í–£")
    print("-" * 40)

    keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
    if not keyword:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
        return

    data = db_manager.get_vacancies_with_keyword(keyword)
    if not data:
        print(f"‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(data)}")
    print("-" * 60)

    for i, (company, title, salary, currency, url) in enumerate(data[:10], 1):
        salary_str = f"{salary:,.0f} {currency}" if salary and currency else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        print(f"{i:2d}. {company}")
        print(f"   üíº {title}")
        print(f"   üí∞ {salary_str}")
        print(f"   üîó {url}")
        print("-" * 60)

    if len(data) > 10:
        print(f"... –∏ –µ—â–µ {len(data) - 10} –≤–∞–∫–∞–Ω—Å–∏–π")


def search_vacancies_via_api():
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
    hh_api = HeadHunterAPI()
    json_saver = JSONSaver()

    try:
        # –í–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
        print("\n–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
        vacancies_json = hh_api.get_vacancies(search_query)
        vacancies = Vacancy.cast_to_object_list(vacancies_json)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        for vacancy in vacancies:
            json_saver.add_vacancy(vacancy)
        print(f"–ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        print("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
        filter_words = (
            input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ")
            .strip()
            .split()
        )
        print(f"- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {filter_words}")

        try:
            salary_min = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É: ") or 0)
            salary_max = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É: ") or 999999999)
        except ValueError:
            print(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            )
            salary_min, salary_max = 0, 999999999

        print(f"- –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç: {salary_min}-{salary_max}\n")

        filtered_vacancies = json_saver.get_vacancies(
            {
                "description": " ".join(filter_words),
                "salary": {"min": salary_min, "max": salary_max},
            }
        )

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–≤–æ–¥
        sorted_vacancies = sorted(filtered_vacancies, reverse=True)
        print(
            f"\n–¢–æ–ø {min(5, len(sorted_vacancies))} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ {len(sorted_vacancies)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:\n"
        )

        if not sorted_vacancies:
            print("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        else:
            for i, vacancy in enumerate(sorted_vacancies[:5], 1):
                salary = f"{vacancy.salary} —Ä—É–±." if vacancy.salary else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                print(f"{i}. {vacancy.title}")
                print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
                print(f"   –°—Å—ã–ª–∫–∞: {vacancy.url}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description[:200]}...\n")

    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {e}")
    finally:
        print("\n–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")


def user_interaction():
    """–§—É–Ω–∫—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HeadHunter")
    print("-------------------------------------------\n")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
    config = DBConfig.from_env()
    db_manager = DBManager(config)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    try:
        with db_manager.get_connection() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã vacancies
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'vacancies'
                    )
                """)
                vacancies_exists = cursor.fetchone()[0]

                if not vacancies_exists:
                    print("üîÑ –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                    if not setup_database():
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                        return

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
                    print("üì° –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–º–∏...")
                    if not setup_and_fill_database():
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                        return
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                    cursor.execute("SELECT COUNT(*) FROM vacancies")
                    vacancy_count = cursor.fetchone()[0]

                    if vacancy_count == 0:
                        print("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è, –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏...")
                        if not setup_and_fill_database():
                            return
                    else:
                        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {vacancy_count} –≤–∞–∫–∞–Ω—Å–∏–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–æ–≤–æ...")
        if not setup_database() or not setup_and_fill_database():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return

    while True:
        print("\n" + "=" * 50)
        print("üéØ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        print("=" * 50)
        print("1. üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ HH API")
        print("2. üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("=" * 50)

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-2): ").strip()

        if choice == "1":
            search_vacancies_via_api()
        elif choice == "2":
            db_manager_interface()
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    user_interaction()
